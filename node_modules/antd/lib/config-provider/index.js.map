{"version":3,"sources":["config-provider/index.jsx"],"names":["configConsumerProps","ConfigContext","getPrefixCls","suffixCls","customizePrefixCls","renderEmpty","defaultRenderEmpty","ConfigConsumer","Consumer","ConfigProvider","arguments","props","prefixCls","renderProvider","context","children","getPopupContainer","csp","autoInsertSpaceInButton","locale","config","ANT_MARK","React","Component","withConfigConsumer","SFC","configProps","basicPrefixCls","cons","constructor","name","displayName"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport createReactContext from '@ant-design/create-react-context';\nimport defaultRenderEmpty from './renderEmpty';\nimport LocaleProvider, { ANT_MARK } from '../locale-provider';\nexport const configConsumerProps = [\n    'getPopupContainer',\n    'rootPrefixCls',\n    'getPrefixCls',\n    'renderEmpty',\n    'csp',\n    'autoInsertSpaceInButton',\n    'locale',\n];\nconst ConfigContext = createReactContext({\n    // We provide a default function for Context without provider\n    getPrefixCls: (suffixCls, customizePrefixCls) => {\n        if (customizePrefixCls)\n            return customizePrefixCls;\n        return `ant-${suffixCls}`;\n    },\n    renderEmpty: defaultRenderEmpty,\n});\nexport const ConfigConsumer = ConfigContext.Consumer;\nclass ConfigProvider extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.getPrefixCls = (suffixCls, customizePrefixCls) => {\n            const { prefixCls = 'ant' } = this.props;\n            if (customizePrefixCls)\n                return customizePrefixCls;\n            return suffixCls ? `${prefixCls}-${suffixCls}` : prefixCls;\n        };\n        this.renderProvider = (context) => {\n            const { children, getPopupContainer, renderEmpty, csp, autoInsertSpaceInButton, locale, } = this.props;\n            const config = Object.assign({}, context, { getPrefixCls: this.getPrefixCls, csp,\n                autoInsertSpaceInButton });\n            if (getPopupContainer) {\n                config.getPopupContainer = getPopupContainer;\n            }\n            if (renderEmpty) {\n                config.renderEmpty = renderEmpty;\n            }\n            return (<ConfigContext.Provider value={config}>\n        <LocaleProvider locale={locale} _ANT_MARK__={ANT_MARK}>\n          {children}\n        </LocaleProvider>\n      </ConfigContext.Provider>);\n        };\n    }\n    render() {\n        return <ConfigConsumer>{this.renderProvider}</ConfigConsumer>;\n    }\n}\nexport function withConfigConsumer(config) {\n    return function (Component) {\n        // Wrap with ConfigConsumer. Since we need compatible with react 15, be care when using ref methods\n        const SFC = ((props) => (<ConfigConsumer>\n        {(configProps) => {\n            const { prefixCls: basicPrefixCls } = config;\n            const { getPrefixCls } = configProps;\n            const { prefixCls: customizePrefixCls } = props;\n            const prefixCls = getPrefixCls(basicPrefixCls, customizePrefixCls);\n            return <Component {...configProps} {...props} prefixCls={prefixCls}/>;\n        }}\n      </ConfigConsumer>));\n        const cons = Component.constructor;\n        const name = (cons && cons.displayName) || Component.name || 'Component';\n        SFC.displayName = `withConfigConsumer(${name})`;\n        return SFC;\n    };\n}\nexport default ConfigProvider;\n"],"file":"index.js"}