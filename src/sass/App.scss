@function dynamicfont($min, $max){
  @return calc(#{$min + "px"} + (#{$max} - #{$min}) * ((100vw - 300px) / (1600 - 300)));
}

$base-font-stack: (
  // Sans-serif
  avenir: (
    avenirthin: (
      family: Avenir Next Cyr,
      weight: 100,
      style: normal,
    ),
    avenirdemiitalic: (
      family: Avenir Next Cyr,
      weight: bold,
      style: italic,
    ),
    avenirmediumitalic: (
      family: Avenir Next Cyr,
      weight: 500,
      style: italic,
    ),
    avenirultralight: (
      family: Avenir Next Cyr Ultra,
      weight: 200,
      style: normal,
    ),
    avenirlight: (
      family: Avenir Next Cyr,
      weight: 300,
      style: normal,
    ),
    avenirlightitalic: (
      family: Avenir Next Cyr,
      weight: 300,
      style: italic,
    ),
    avenirbolditalic: (
      family: Avenir Next Cyr,
      weight: bold,
      style: italic,
    ),
    avenirultralightit: (
      family: Avenir Next Cyr Ultra,
      weight: 200,
      style: italic,
    ),
    avenirheavy: (
      family: Avenir Next Cyr,
      weight: 900,
      style: normal,
    ),
    avenirdemi: (
      family: Avenir Next Cyr,
      weight: bold,
      style: normal,
    ),
    avenirregular: (
      family: Avenir Next Cyr,
      weight: normal,
      style: normal,
    ),
    avenirmedium: (
      family: Avenir Next Cyr,
      weight: 500,
      style: normal,
    ),
    avenirheavyitalic: (
      family: Avenir Next Cyr,
      weight: 900,
      style: italic,
    ),
    aveniritalic: (
      family: Avenir Next Cyr,
      weight: normal,
      style: italic,
    ),
    avenirthinitalic: (
      family: Avenir Next Cyr,
      weight: 100,
      style: italic,
    ),
  ),

);
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    @if type-of($map) != "map" {
      @warn '`#{$map}` is not a map.';
      @return false;
    }
    $map: map-get($map, $key);
  }

  @return $map;
}


@function contains($list, $values...) {
  @each $value in $values {
    @if type-of(index($list, $value)) != 'number' {
      @return false;
    }
  }

  @return true;
}

@mixin font($group, $variant: regular, $properties: family weight style, $font-stack: $base-font-stack) {
  $font-properties: map-deep-get($font-stack, $group, $variant);
  
  @if $font-properties {
    @each $property, $values in $font-properties {
      @if contains($properties, $property) {
        font-#{$property}: map-get($font-properties, $property);
      }
    }
  }
}

.container{
  max-width: 1140px;
  margin: 0 auto;
}
#categories {
  padding-top: 70px;
  padding-bottom: 120px;
  .padding-bottom{
    padding-bottom: 60px;
  }
  h1{
    margin: 0px;
    margin-left: 20px;
    a{
      color: #393939;
      @include font(avenir, avenirregular);
    }
  }
  .sub-categories{
    text-align: center;
  }
  h2{
    margin-left: -75px;
    a{
      color: #6e6e6e;
      @include font(avenir, avenirregular);
    }
    span{
      color: #bdbdbd;
      margin-left: 7px;
      @include font(avenir, avenirregular);
    }
  }
  h2:first-child{
    margin-top: 24px;
  }
}
#vip{
    background: url('../images/strap.png');
    background-size: cover;
    .vip-title{
      h1{
        font-size: dynamicfont(24, 28);
      }
    }
}
.d-inline-block{
  display: inline-block;
}
.d-flex-horizontal{
  display: flex;
  justify-content: center;
}
.d-flex-vertical{
  display: flex;
  align-items: center;
}
.d-flex-centered{
  display: flex;
  align-items: center;
  justify-content: center;
}
.d-flex-centered{
    h1{
        color: red
    }
}
/* body {
  font-size: calc(14px + (26 - 14) * ((100vw - 300px) / (1600 - 300)));
} */